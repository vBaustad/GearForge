import { promises as fs } from "node:fs";
import path from "node:path";
const ROOT = process.cwd();
const SRC_DIR = path.join(ROOT, "public", "images", "key_art");
const OUT_FILE = path.join(ROOT, "src", "features", "guides", "data", "keyArtManifest.ts");
const ALLOWED = new Set([".jpg", ".jpeg", ".png", ".webp", ".avif"]);

async function walk(dir) {
  const out = [];
  for (const ent of await fs.readdir(dir, { withFileTypes: true })) {
    const p = path.join(dir, ent.name);
    if (ent.isDirectory()) out.push(...await walk(p));
    else if (ALLOWED.has(path.extname(ent.name).toLowerCase())) {
      // public/â€¦ should be referenced at runtime with a leading slash
      const rel = "/" + path.posix.join(
        "images",
        "key_art",
        path.relative(SRC_DIR, p).split(path.sep).join(path.posix.sep)
      );
      out.push(rel);
    }
  }
  return out;
}

const files = (await walk(SRC_DIR)).sort((a, b) => a.localeCompare(b));
const content = `// AUTO-GENERATED by scripts/build-keyart-manifest.mjs
// Do not edit by hand.
export const KEY_ART: string[] = ${JSON.stringify(files, null, 2)}; 
`;
await fs.mkdir(path.dirname(OUT_FILE), { recursive: true });
await fs.writeFile(OUT_FILE, content, "utf8");
console.log(`Wrote ${files.length} key art paths to`, path.relative(ROOT, OUT_FILE));
